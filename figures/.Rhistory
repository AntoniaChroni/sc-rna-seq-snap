regulartable() %>%
fontsize(size = 12, part = "all"))
matched_samples_paired <- length(unique(paired_assays_matched$Kids_First_Participant_ID))
list <- genomic_assays %>%
count(cancer_group) %>%
arrange(desc(n))
print(list, dplyr.print_min = Inf)
genomic_assays_matched <- genomic_assays_matched %>%
mutate(cancer_group_broad = case_when(grepl("High-grade glioma", cancer_group) ~ "High-grade glioma",
grepl("Low-grade glioma", cancer_group) ~ "Low-grade glioma",
grepl("Medulloblastoma", cancer_group) ~ "Medulloblastoma",
grepl("Ependymoma", cancer_group) ~ "Ependymoma",
grepl("Diffuse midline glioma", cancer_group) ~ "Diffuse midline glioma"))
genomic_assays_matched %>%
filter(cancer_group_broad == "Low-grade glioma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "Medulloblastoma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "High-grade glioma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "Diffuse midline glioma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "Ependymoma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
sessionInfo()
suppressPackageStartupMessages({
library(tidyverse)
library(flextable)
})
# Detect the ".git" folder -- this will be in the project root directory.
# Use this as the root directory to ensure proper sourcing of functions no
# matter where this is called from
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
data_dir <- file.path(root_dir, "data")
analysis_dir <- file.path(root_dir, "analyses", "sample-distribution-analysis")
input_dir <- file.path(analysis_dir, "input")
# Inputs
v12_file <- file.path(data_dir, "histologies.tsv")
# File path to results directory
results_dir <-
file.path(analysis_dir, "results")
if (!dir.exists(results_dir)) {
dir.create(results_dir)
}
#---------------------------------------------------------------------------------------------------------
# Notes - to remove this part when run for v13
# Jo Lynne found the following status for 2/3 in the data warehouse:
# C4106355-Tumor = Recurrence, C4113612-Tumor = Initial CNS Tumor, 7316UP-3705 = Not Reported
# manually annotate them here and these will be updated in the v13 - then discard that part of the code
#---------------------------------------------------------------------------------------------------------
# The file contains duplicates because some samples might have:
# (1) both WGS and WXS, and/or (2) multiple biospecimen samples.
# We will address these issues by creating a unique identifier per each sample and assay (match_id_DNA).
# make this code reproducible
set.seed(2023)
# Read in histologies file and filter for the pbta cohort
pbta <- readr::read_tsv(v12_file, guess_max = 100000, show_col_types = FALSE) %>%
filter(cohort == "PBTA",
!is.na(pathology_diagnosis), # to remove matched normal samples
!composition %in% c("Derived Cell Line", "PDX"),
!experimental_strategy %in% c("Methylation", "Targeted Sequencing")) %>%
mutate(tumor_descriptor = case_when(grepl("C4106355-Tumor", sample_id) ~ "Recurrence",
grepl("C4113612-Tumor", sample_id) ~ "Diagnosis",
grepl("Primary Tumor|Initial CNS Tumor", tumor_descriptor) ~ "Diagnosis",
grepl("Progressive Disease Post-Mortem", tumor_descriptor) ~ "Deceased",
TRUE ~ tumor_descriptor),
match_id = paste(tumor_descriptor, sample_id, sep = "_"),
DNA = case_when(grepl("WGS|WXS", experimental_strategy) ~ "DNA",
grepl("RNA-Seq", experimental_strategy) ~ "no"),
match_id_DNA = paste(Kids_First_Participant_ID, tumor_descriptor, DNA, sep = "_")) %>%
distinct(match_id_DNA, .keep_all = TRUE) # filter out
print(pbta %>% count(tumor_descriptor))
kids_pbta_samples <- length(unique(pbta$Kids_First_Participant_ID))
assays <- pbta %>%
dplyr::select(Kids_First_Participant_ID, tumor_descriptor, match_id, experimental_strategy, cancer_group, DNA, match_id_DNA) %>%
unique() %>%
arrange(Kids_First_Participant_ID, experimental_strategy)
# we perform join here using the Kids_First_Participant_ID and match_id
paired_assays_all <- assays %>%
group_by(Kids_First_Participant_ID, match_id, tumor_descriptor, cancer_group) %>%
summarise(experimental_strategy = str_c(experimental_strategy, collapse = ";")) %>%
mutate(experimental_strategy_sum = case_when(grepl("RNA-Seq", experimental_strategy) & grepl("WGS|WXS", experimental_strategy) ~ "Both",
grepl("WXS|WGS", experimental_strategy) ~ "DNA",
grepl("RNA-Seq", experimental_strategy) ~ "RNA"))
paired_assays_all %>%
group_by(experimental_strategy) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
paired_assays_all %>%
group_by(experimental_strategy_sum) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
paired_assays_all %>%
arrange(Kids_First_Participant_ID) %>%
group_by(tumor_descriptor, experimental_strategy_sum) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
paired_assays_all_diagnosis <- paired_assays_all %>%
group_by(Kids_First_Participant_ID) %>%
arrange(tumor_descriptor) %>%
summarise(tumor_descriptor_sum = str_c(tumor_descriptor, collapse = "-")) %>%
mutate(tumor_descriptor_sum = case_when(
grepl("-", tumor_descriptor_sum) ~ tumor_descriptor_sum,
TRUE ~ "Unmatched"
))
paired_assays_all_diagnosis %>%
group_by(tumor_descriptor_sum) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays <- paired_assays_all %>%
filter(!(experimental_strategy_sum == "RNA")) %>%
group_by(Kids_First_Participant_ID) %>%
summarize(descriptors = paste(sort(tumor_descriptor), collapse = ", "),
experimental_strategy = paste(sort(experimental_strategy), collapse = ", "),
cancer_group = paste(sort(cancer_group), collapse = ", "))
kids_pbta_samples_dna <- length(unique(genomic_assays$Kids_First_Participant_ID))
genomic_assays %>%
group_by(descriptors) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays
genomic_assays %>%
group_by(Kids_First_Participant_ID, descriptors, experimental_strategy) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays
genomic_assays_matched <- genomic_assays %>%
filter(!descriptors %in% c("Diagnosis", "Progressive", "Recurrence",
"Second Malignancy", "Deceased", "Not Reported",
"Unavailable", "Metastatic", "Residual", "")) %>%
mutate(experimental_strategy = gsub("RNA-Seq;","", experimental_strategy)) %>%
write_tsv(file.path(results_dir, "genomic_assays_matched_time_points.tsv"))
matched_samples_genomic <- length(unique(genomic_assays_matched$Kids_First_Participant_ID))
transcriptomic_assays <- paired_assays_all %>%
filter(experimental_strategy_sum %in% c("Both", "RNA")) %>%
group_by(Kids_First_Participant_ID) %>%
summarize(descriptors = paste(sort(unique(tumor_descriptor)), collapse = ", "),
experimental_strategy = unique(experimental_strategy),
cancer_group = paste(sort(unique(cancer_group)), collapse = ", "))
kids_pbta_samples_rna <- length(unique(transcriptomic_assays$Kids_First_Participant_ID))
transcriptomic_assays %>%
group_by(descriptors) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
print(transcriptomic_assays  %>%
group_by(Kids_First_Participant_ID, descriptors, experimental_strategy) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all"))
transcriptomic_assays_matched <- transcriptomic_assays %>%
filter(!descriptors %in% c("Diagnosis", "Progressive", "Recurrence",
"Second Malignancy", "Deceased", "Not Reported",
"Unavailable", "Metastatic", "Residual", "")) %>%
mutate(experimental_strategy = gsub(";WGS|WXS","", experimental_strategy)) %>%
write_tsv(file.path(results_dir, "transcriptomic_assays_matched_time_points.tsv"))
transcriptomic_assays_matched %>%
group_by(Kids_First_Participant_ID, descriptors, experimental_strategy) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
matched_samples_rna <- length(unique(transcriptomic_assays_matched$Kids_First_Participant_ID))
paired_assays <- paired_assays_all %>%
filter(experimental_strategy_sum == "Both") %>%
group_by(Kids_First_Participant_ID) %>%
summarize(descriptors = paste(sort(tumor_descriptor), collapse = ", "),
experimental_strategy = paste(sort(experimental_strategy), collapse = ", "),
cancer_group = paste(sort(cancer_group), collapse = ", "))
kids_pbta_samples_paired <- length(unique(paired_assays$Kids_First_Participant_ID))
paired_assays %>%
group_by(descriptors) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
print(paired_assays %>%
group_by(Kids_First_Participant_ID, descriptors, experimental_strategy) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all"))
paired_assays_matched <- paired_assays %>%
filter(!descriptors %in% c("Diagnosis", "Progressive", "Recurrence",
"Second Malignancy", "Deceased", "Not Reported",
"Unavailable", "Metastatic", "Residual", "")) %>%
write_tsv(file.path(results_dir, "paired_assays_matched_time_points.tsv"))
print(paired_assays_matched %>%
group_by(Kids_First_Participant_ID, descriptors, experimental_strategy) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all"))
matched_samples_paired <- length(unique(paired_assays_matched$Kids_First_Participant_ID))
list <- genomic_assays %>%
count(cancer_group) %>%
arrange(desc(n))
print(list, dplyr.print_min = Inf)
genomic_assays_matched <- genomic_assays_matched %>%
mutate(cancer_group_broad = case_when(grepl("High-grade glioma", cancer_group) ~ "High-grade glioma",
grepl("Low-grade glioma", cancer_group) ~ "Low-grade glioma",
grepl("Medulloblastoma", cancer_group) ~ "Medulloblastoma",
grepl("Ependymoma", cancer_group) ~ "Ependymoma",
grepl("Diffuse midline glioma", cancer_group) ~ "Diffuse midline glioma"))
genomic_assays_matched %>%
filter(cancer_group_broad == "Low-grade glioma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "Medulloblastoma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "High-grade glioma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "Diffuse midline glioma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays_matched %>%
filter(cancer_group_broad == "Ependymoma") %>%
regulartable() %>%
fontsize(size = 12, part = "all")
sessionInfo()
genomic_assays <- paired_assays_all %>%
filter(!(experimental_strategy_sum == "RNA")) %>%
group_by(Kids_First_Participant_ID) %>%
summarize(descriptors = paste(sort(tumor_descriptor), collapse = ", "),
experimental_strategy = paste(sort(experimental_strategy), collapse = ", "),
cancer_group = paste(sort(cancer_group), collapse = ", "))
kids_pbta_samples_dna <- length(unique(genomic_assays$Kids_First_Participant_ID))
genomic_assays %>%
group_by(descriptors) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays
genomic_assays %>%
group_by(Kids_First_Participant_ID, descriptors, experimental_strategy) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
genomic_assays
transcriptomic_assays <- paired_assays_all %>%
filter(experimental_strategy_sum %in% c("Both", "RNA")) %>%
group_by(Kids_First_Participant_ID) %>%
summarize(descriptors = paste(sort(unique(tumor_descriptor)), collapse = ", "),
experimental_strategy = unique(experimental_strategy),
cancer_group = paste(sort(unique(cancer_group)), collapse = ", "))
kids_pbta_samples_rna <- length(unique(transcriptomic_assays$Kids_First_Participant_ID))
transcriptomic_assays %>%
group_by(descriptors) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
transcriptomic_assays %>%
group_by(descriptors) %>%
tally() %>%
arrange(desc(n)) %>%
regulartable() %>%
fontsize(size = 12, part = "all")
transcriptomic_assays
transcriptomic_assays_matched <- transcriptomic_assays %>%
filter(!descriptors %in% c("Diagnosis", "Progressive", "Recurrence",
"Second Malignancy", "Deceased", "Not Reported",
"Unavailable", "Metastatic", "Residual", "")) %>%
mutate(experimental_strategy = gsub(";WGS|WXS","", experimental_strategy)) %>%
write_tsv(file.path(results_dir, "transcriptomic_assays_matched_time_points.tsv"))
transcriptomic_assays_matched
matched_samples_rna <- length(unique(transcriptomic_assays_matched$Kids_First_Participant_ID))
suppressPackageStartupMessages({
library(tidyverse)
})
# Detect the ".git" folder. This will be in the project root directory.
# Use this as the root directory to ensure proper sourcing of functions
# no matter where this is called from.
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
scratch_dir <- file.path(root_dir, "scratch")
analysis_dir <- file.path(root_dir, "analyses", "tmb-vaf-longitudinal")
input_dir <- file.path(analysis_dir, "input")
# Input files
tmb_genomic_file <- file.path(scratch_dir, "tmb_genomic.tsv")
tumor_descriptor_color_palette_file <- file.path(root_dir, "figures", "palettes", "tumor_descriptor_color_palette.tsv")
# File path to plots directory
plots_dir <-
file.path(analysis_dir, "plots")
if (!dir.exists(plots_dir)) {
dir.create(plots_dir)
}
source(paste0(analysis_dir, "/util/function-create-barplot.R"))
source(paste0(root_dir, "/figures/theme.R"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
# Detect the ".git" folder. This will be in the project root directory.
# Use this as the root directory to ensure proper sourcing of functions
# no matter where this is called from.
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
scratch_dir <- file.path(root_dir, "scratch")
analysis_dir <- file.path(root_dir, "analyses", "tmb-vaf-longitudinal")
input_dir <- file.path(analysis_dir, "input")
# Input files
tmb_genomic_file <- file.path(scratch_dir, "tmb_genomic.tsv")
tumor_descriptor_color_palette_file <- file.path(root_dir, "figures", "palettes", "tumor_descriptor_color_palette.tsv")
# File path to plots directory
plots_dir <-
file.path(analysis_dir, "plots")
if (!dir.exists(plots_dir)) {
dir.create(plots_dir)
}
source(paste0(analysis_dir, "/util/function-create-barplot.R"))
source(paste0(root_dir, "/figures/theme.R"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
# Detect the ".git" folder. This will be in the project root directory.
# Use this as the root directory to ensure proper sourcing of functions
# no matter where this is called from.
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
scratch_dir <- file.path(root_dir, "scratch")
analysis_dir <- file.path(root_dir, "analyses", "tmb-vaf-longitudinal")
input_dir <- file.path(analysis_dir, "input")
# Input files
tmb_genomic_file <- file.path(scratch_dir, "tmb_genomic.tsv")
tumor_descriptor_color_palette_file <- file.path(root_dir, "figures", "palettes", "tumor_descriptor_color_palette.tsv")
# File path to plots directory
plots_dir <-
file.path(analysis_dir, "plots")
if (!dir.exists(plots_dir)) {
dir.create(plots_dir)
}
source(paste0(analysis_dir, "/util/function-create-barplot.R"))
source(paste0(root_dir, "/figures/theme.R"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
# Detect the ".git" folder. This will be in the project root directory.
# Use this as the root directory to ensure proper sourcing of functions
# no matter where this is called from.
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
scratch_dir <- file.path(root_dir, "scratch")
analysis_dir <- file.path(root_dir, "analyses", "tmb-vaf-longitudinal")
input_dir <- file.path(analysis_dir, "input")
# Input files
tmb_genomic_file <- file.path(scratch_dir, "tmb_genomic.tsv")
tumor_descriptor_color_palette_file <- file.path(root_dir, "figures", "palettes", "tumor_descriptor_color_palette.tsv")
# File path to plots directory
plots_dir <-
file.path(analysis_dir, "plots")
if (!dir.exists(plots_dir)) {
dir.create(plots_dir)
}
source(paste0(analysis_dir, "/util/function-create-barplot.R"))
source(paste0(root_dir, "/figures/theme.R"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
# Detect the ".git" folder. This will be in the project root directory.
# Use this as the root directory to ensure proper sourcing of functions
# no matter where this is called from.
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
scratch_dir <- file.path(root_dir, "scratch")
analysis_dir <- file.path(root_dir, "analyses", "tmb-vaf-longitudinal")
input_dir <- file.path(analysis_dir, "input")
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
# Magrittr pipe
`%>%` <- dplyr::`%>%`
# Establish base dir
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
# Output to palette directory
output_dir <-
file.path(root_dir, "figures", "palettes")
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
### A color scale for tumor_descriptor data
tumor_descriptor_col_palette <- c("#1e90ff",
"#808080",
"#800080",
"#cd2626",
"#FDB863",
"#A6611A")
tumor_descriptor_col_names <- c("Diagnosis",
"Progressive",
"Recurrence",
"Deceased",
"Second Malignancy",
"Unavailable")
tumor_descriptor_df <- data.frame(color_names = tumor_descriptor_col_names,
hex_codes = tumor_descriptor_col_palette) %>%
myString.replace("\t", "") %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv"))
# Format as data.frame
tumor_descriptor_df <- data.frame(color_names = tumor_descriptor_col_names,
hex_codes = tumor_descriptor_col_palette) %>%
str_replace_all(hex_codes, "[\\r\\n\\t]+", " ")
# Format as data.frame
tumor_descriptor_df <- data.frame(color_names = tumor_descriptor_col_names,
hex_codes = tumor_descriptor_col_palette) %>%
str_replace_all(hex_codes, "[\\r\\n\\t]+", "") %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv"))
tumor_descriptor_df <- data.frame(color_names = tumor_descriptor_col_names,
hex_codes = tumor_descriptor_col_palette)
str_replace_all(tumor_descriptor_df$hex_codes, "[\\r\\n\\t]+", "")
tumor_descriptor_df <- str_replace_all(tumor_descriptor_df$hex_codes, "[\\r\\n\\t]+", "") %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv"))
tumor_descriptor_df <- tumor_descriptor_df %>%
str_replace_all(tumor_descriptor_df$hex_codes, "[\\r\\n\\t]+", "") %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv"))
tumor_descriptor_df <- str_replace_all(tumor_descriptor_df, "[\\r\\n\\t]+", "") %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv"))
str_replace_all(tumor_descriptor_df, "[\\r\\n\\t]+", "")
###-----------------------------------------
### A color scale for tumor_descriptor data for creating corplots
# `timepoint' stands for any of the following: "Diagnosis", "Progressive", "Recurrence"
timepoint_col_palette <- c("#1e90ff",
"#cd2626",
"#575757",
"#DFC27D")
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
timepoint_col_names <- c("timepoint",
"Deceased",
"Common",
"Uncommon")
# Magrittr pipe
`%>%` <- dplyr::`%>%`
# Establish base dir
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
# Output to palette directory
output_dir <-
file.path(root_dir, "figures", "palettes")
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
### A color scale for tumor_descriptor data
tumor_descriptor_col_palette <- c("#1e90ff",
"#808080",
"#800080",
"#cd2626",
"#fdb863",
"#a6611a")
tumor_descriptor_col_names <- c("Diagnosis",
"Progressive",
"Recurrence",
"Deceased",
"Second Malignancy",
"Unavailable")
# Format as data.frame
tumor_descriptor_df <- data.frame(color_names = tumor_descriptor_col_names,
hex_codes = tumor_descriptor_col_palette) %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv"))
###-----------------------------------------
### A color scale for tumor_descriptor data for creating corplots
# `timepoint' stands for any of the following: "Diagnosis", "Progressive", "Recurrence"
timepoint_col_palette <- c("#1e90ff",
"#cd2626",
"#575757",
"#dfc27d")
timepoint_col_names <- c("timepoint",
"Deceased",
"Common",
"Uncommon")
# Format as data.frame
timepoint_df <- data.frame(color_names = timepoint_col_names,
hex_codes = timepoint_col_palette) %>%
readr::write_tsv(file.path(output_dir, "timepoint_color_palette.tsv"))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
# Format as data.frame
tumor_descriptor_df <- data.frame(color_names = tumor_descriptor_col_names,
hex_codes = tumor_descriptor_col_palette) %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv", header = TRUE))
### A color scale for tumor_descriptor data
tumor_descriptor_col_palette <- c("#1e90ff",
"#808080",
"#800080",
"#cd2626",
"#fdb863",
"#a6611a")
tumor_descriptor_col_names <- c("Diagnosis",
"Progressive",
"Recurrence",
"Deceased",
"Second Malignancy",
"Unavailable")
# Format as data.frame
tumor_descriptor_df <- data.frame(color_names = tumor_descriptor_col_names,
hex_codes = tumor_descriptor_col_palette) %>%
readr::write_tsv(file.path(output_dir, "tumor_descriptor_color_palette.tsv", header = TRUE))
source(paste0(root_dir, "/figures/palettes/tumor_descriptor_color_palette.tsv"))
